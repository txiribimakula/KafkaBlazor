@namespace BlazorApp.Components
@using Confluent.Kafka
@inject State State;
@inject KafkaSettings KafkaSettings

<div class="topic">
    <h3>Topic <button @onclick="Sync">Sync</button></h3>
    <div class="partitions">
        @foreach (var partition in State.Partitions) {
            <Partition Data="@partition" />
        }
    </div>
</div>

@code {
    protected override void OnInitialized() {
        base.OnInitialized();

        State.StateChanged += OnStateChanged;
    }

    private void OnStateChanged(object? sender, EventArgs args) {
        InvokeAsync(StateHasChanged);
    }

    private void Sync() {
        State.Clear();

        var partitionSyncConsumerConfig = new ConsumerConfig
        {
            BootstrapServers = KafkaSettings.BootstrapServers,
            SaslUsername = KafkaSettings.SaslUsername,
            SaslPassword = KafkaSettings.SaslPassword,
            SecurityProtocol = SecurityProtocol.SaslSsl,
            SaslMechanism = SaslMechanism.Plain,
            GroupId = "sync-partitions",
            AutoOffsetReset = AutoOffsetReset.Earliest,
            EnableAutoCommit = false,
        };

        var cancellationTokenSource = new CancellationTokenSource();
        using (var consumer = new ConsumerBuilder<Ignore, string>(partitionSyncConsumerConfig)
        .SetPartitionsAssignedHandler((consumer, partitions) =>
        {
            foreach (var partition in partitions)
            {
                State.AddPartition(partition.Partition.Value);
            }
            InvokeAsync(StateHasChanged);
            cancellationTokenSource.Cancel();
        }).Build())
        {
            consumer.Subscribe("topic.pruebas.con.3.particiones");
            try
            {
                consumer.Consume(cancellationTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                consumer.Close();
            }
            catch (ConsumeException)
            {
                consumer.Close();
            }
        }
    }
}