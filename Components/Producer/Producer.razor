@namespace BlazorApp.Components
@using Confluent.Kafka
@using System.Text.Json

@inject State State;
@inject KafkaSettings KafkaSettings;

<div class="producer">
    <h3>Producer</h3>
    <input type="text" placeholder="message" @bind="messageValue" />
    <input type="text" placeholder="key" @bind="messageKey" />
    <TopicSelector @bind-Topic="Topic" />
    <button @onclick="Produce">Produce</button>
</div>

@code {
    private IProducer<string, string>? producer;
    private string messageValue = string.Empty;
    private string messageKey = string.Empty;
    public string? Topic { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var producerConfig = new ProducerConfig
        {
            BootstrapServers = KafkaSettings.BootstrapServers,
            SaslUsername = KafkaSettings.SaslUsername,
            SaslPassword = KafkaSettings.SaslPassword,
            SecurityProtocol = SecurityProtocol.SaslSsl,
            SaslMechanism = SaslMechanism.Plain,
            Acks = Acks.All,
            StickyPartitioningLingerMs = 0,
        };

        producer = new ProducerBuilder<string, string>(producerConfig).Build();
    }

    private async void Produce() {
        if(producer == null)
        {
            return;
        }

        var newMessage = new Model.Message(this.messageKey, this.messageValue, Guid.NewGuid());
        var produced = await producer.ProduceAsync(
            Topic,
            new Confluent.Kafka.Message<string, string>
            {
                Key = newMessage.Key,
                Value = JsonSerializer.Serialize(newMessage)
            }
        );

        State.AddMessage(produced.Partition.Value, newMessage);
    }
}