@namespace BlazorApp.Components
@using Confluent.Kafka
@using System.Text.Json
@inject KafkaSettings KafkaSettings
@inject State State

<div class="@(IsConsuming ? "consumer" : "consumer-inactive")">
    <h3>Consumer</h3>
    <div>partitions:
        @foreach (var partition in Partitions)
        {
            @partition
        }
    </div>
    <button @onclick="Consume" disabled="@(IsConsuming || !State.IsBrokerReady || IsLoading)">Consume</button>
    <button @onclick="Close" disabled="@(!IsConsuming)">Close</button>
    <div class="latest-logs">
        @foreach (var log in Logs)
        {
            <div>
                @log
            </div>
        }
    </div>
</div>

@code {
    public bool IsConsuming { get; set; } = false;
    public bool IsLoading { get; set; } = false;

    public IEnumerable<int> Partitions { get; set; } = new int[0];

    public List<Log> Logs { get; set; } = new List<Log>();

    private CancellationTokenSource? cancellationTokenSource;

    private IConsumer<Ignore, string>? consumer;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        State.StateChanged += OnStateChanged;
    }

    private void OnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task Consume()
    {
        IsLoading = true;

        cancellationTokenSource = new CancellationTokenSource();

        var config = new ConsumerConfig
        {
            BootstrapServers = KafkaSettings.BootstrapServers,
            SaslUsername = KafkaSettings.SaslUsername,
            SaslPassword = KafkaSettings.SaslPassword,
            SecurityProtocol = SecurityProtocol.SaslSsl,
            SaslMechanism = SaslMechanism.Plain,
            GroupId = "temporary",
            AutoOffsetReset = AutoOffsetReset.Latest,
            EnableAutoCommit = false,
            MaxPollIntervalMs = 11000,
            SessionTimeoutMs = 10000,
            HeartbeatIntervalMs = 3000
        };

        try
        {
            using (consumer = new ConsumerBuilder<Ignore, string>(config)
            .SetPartitionsAssignedHandler((consumer, partitions) =>
            {
                Partitions = partitions.Select(partition => partition.Partition.Value);
                IsLoading = false;
                IsConsuming = true;
                Logs.Add(new Log(LogLevel.Warning, "assigned partitions [" + string.Join(",", Partitions) + "]..."));
                InvokeAsync(StateHasChanged);
            })
            .SetPartitionsRevokedHandler((consumer, partitions) =>
            {
                Partitions = [];
                IsConsuming = false;
                Logs.Add(new Log(LogLevel.Warning, "revoked partitions [" + string.Join(",", partitions.Select(partition => partition.Partition.Value)) + "]..."));
            })
            .Build())
            {
                consumer.Subscribe(State.SingleTopic);

                await Task.Run(() =>
                {
                    while (!cancellationTokenSource.Token.IsCancellationRequested)
                    {
                        try
                        {
                            Logs.Add(new Log(LogLevel.Information, "consuming on partitions [" + string.Join(",", Partitions) + "]..."));
                            InvokeAsync(StateHasChanged);
                            var consumeResult = consumer.Consume(cancellationTokenSource.Token);
                            var consumeMessage = JsonSerializer.Deserialize<Model.Message>(consumeResult.Message.Value);
                            Logs.Add(new Log(LogLevel.Information, "consumed from partition " + consumeResult.Partition.Value));
                            Logs.Add(new Log(LogLevel.Information, "handling for " + consumeMessage.Duration + "s..."));
                            InvokeAsync(StateHasChanged);
                            cancellationTokenSource.Token.WaitHandle.WaitOne(TimeSpan.FromSeconds(consumeMessage.Duration));
                            Logs.Add(new Log(LogLevel.Information, "handled")   );

                            if (cancellationTokenSource.Token.IsCancellationRequested)
                            {
                                throw new OperationCanceledException();
                            }

                            Logs.Add(new Log(LogLevel.Information, "committing..."));
                            consumer.Commit(consumeResult);
                            State.Commit(consumeResult.Partition.Value, consumeMessage.Id, "temporary");
                            Logs.Add(new Log(LogLevel.Information, "committed"));
                            InvokeAsync(StateHasChanged);
                        }
                        catch (OperationCanceledException)
                        {
                            Logs.Add(new Log(LogLevel.Error, "OperationCanceledException"));
                            InvokeAsync(StateHasChanged);
                        }
                        catch (KafkaException ex)
                        {
                            Logs.Add(new Log(LogLevel.Error, ex.Message));
                            InvokeAsync(StateHasChanged);
                        }
                    }

                    consumer.Close();
                });
            };
        }
        catch(Exception ex)
        {
            
        }
    }

    private void Close()
    {
        cancellationTokenSource?.Cancel();
    }
}